#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'honeybee_types'

module Honeybee
  module Scorer
    class Client
      include ::Thrift::Client

      def scoreRow(model, row)
        send_scoreRow(model, row)
        return recv_scoreRow()
      end

      def send_scoreRow(model, row)
        send_message('scoreRow', ScoreRow_args, :model => model, :row => row)
      end

      def recv_scoreRow()
        result = receive_message(ScoreRow_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scoreRow failed: unknown result')
      end

      def scoreRows(model, rows)
        send_scoreRows(model, rows)
        return recv_scoreRows()
      end

      def send_scoreRows(model, rows)
        send_message('scoreRows', ScoreRows_args, :model => model, :rows => rows)
      end

      def recv_scoreRows()
        result = receive_message(ScoreRows_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scoreRows failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_scoreRow(seqid, iprot, oprot)
        args = read_args(iprot, ScoreRow_args)
        result = ScoreRow_result.new()
        result.success = @handler.scoreRow(args.model, args.row)
        write_result(result, oprot, 'scoreRow', seqid)
      end

      def process_scoreRows(seqid, iprot, oprot)
        args = read_args(iprot, ScoreRows_args)
        result = ScoreRows_result.new()
        result.success = @handler.scoreRows(args.model, args.rows)
        write_result(result, oprot, 'scoreRows', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class ScoreRow_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MODEL = 1
      ROW = 2

      FIELDS = {
        MODEL => {:type => ::Thrift::Types::STRUCT, :name => 'model', :class => ::Honeybee::PredictiveModel},
        ROW => {:type => ::Thrift::Types::MAP, :name => 'row', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Honeybee::NumericalOrNominal}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ScoreRow_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ScoreRows_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MODEL = 1
      ROWS = 2

      FIELDS = {
        MODEL => {:type => ::Thrift::Types::STRUCT, :name => 'model', :class => ::Honeybee::PredictiveModel},
        ROWS => {:type => ::Thrift::Types::LIST, :name => 'rows', :element => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Honeybee::NumericalOrNominal}}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ScoreRows_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
